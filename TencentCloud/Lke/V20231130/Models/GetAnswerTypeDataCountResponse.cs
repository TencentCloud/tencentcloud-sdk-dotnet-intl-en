/*
 * Copyright (c) 2018-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

namespace TencentCloud.Lke.V20231130.Models
{
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using TencentCloud.Common;

    public class GetAnswerTypeDataCountResponse : AbstractModel
    {
        
        /// <summary>
        /// Total number of messages.
        /// </summary>
        [JsonProperty("Total")]
        public ulong? Total{ get; set; }

        /// <summary>
        /// Total number of direct responses by the large model.
        /// </summary>
        [JsonProperty("ModelReplyCount")]
        public ulong? ModelReplyCount{ get; set; }

        /// <summary>
        /// Total number of knowledge-based responses.
        /// </summary>
        [JsonProperty("KnowledgeCount")]
        public ulong? KnowledgeCount{ get; set; }

        /// <summary>
        /// Total number of task flow responses.
        /// </summary>
        [JsonProperty("TaskFlowCount")]
        public ulong? TaskFlowCount{ get; set; }

        /// <summary>
        /// Total number of search engine responses.
        /// </summary>
        [JsonProperty("SearchEngineCount")]
        public ulong? SearchEngineCount{ get; set; }

        /// <summary>
        /// Total number of image understanding responses.
        /// </summary>
        [JsonProperty("ImageUnderstandingCount")]
        public ulong? ImageUnderstandingCount{ get; set; }

        /// <summary>
        /// Total number of responses to rejected questions.
        /// </summary>
        [JsonProperty("RejectCount")]
        public ulong? RejectCount{ get; set; }

        /// <summary>
        /// Total number of sensitive responses.
        /// </summary>
        [JsonProperty("SensitiveCount")]
        public ulong? SensitiveCount{ get; set; }

        /// <summary>
        /// Total number of responses for concurrency exceeded.
        /// </summary>
        [JsonProperty("ConcurrentLimitCount")]
        public ulong? ConcurrentLimitCount{ get; set; }

        /// <summary>
        /// Total number of unknown question responses.
        /// </summary>
        [JsonProperty("UnknownIssuesCount")]
        public ulong? UnknownIssuesCount{ get; set; }

        /// <summary>
        /// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        /// </summary>
        [JsonProperty("RequestId")]
        public string RequestId{ get; set; }


        /// <summary>
        /// For internal usage only. DO NOT USE IT.
        /// </summary>
        public override void ToMap(Dictionary<string, string> map, string prefix)
        {
            this.SetParamSimple(map, prefix + "Total", this.Total);
            this.SetParamSimple(map, prefix + "ModelReplyCount", this.ModelReplyCount);
            this.SetParamSimple(map, prefix + "KnowledgeCount", this.KnowledgeCount);
            this.SetParamSimple(map, prefix + "TaskFlowCount", this.TaskFlowCount);
            this.SetParamSimple(map, prefix + "SearchEngineCount", this.SearchEngineCount);
            this.SetParamSimple(map, prefix + "ImageUnderstandingCount", this.ImageUnderstandingCount);
            this.SetParamSimple(map, prefix + "RejectCount", this.RejectCount);
            this.SetParamSimple(map, prefix + "SensitiveCount", this.SensitiveCount);
            this.SetParamSimple(map, prefix + "ConcurrentLimitCount", this.ConcurrentLimitCount);
            this.SetParamSimple(map, prefix + "UnknownIssuesCount", this.UnknownIssuesCount);
            this.SetParamSimple(map, prefix + "RequestId", this.RequestId);
        }
    }
}

