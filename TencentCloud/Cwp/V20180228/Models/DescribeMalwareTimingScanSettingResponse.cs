/*
 * Copyright (c) 2018-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

namespace TencentCloud.Cwp.V20180228.Models
{
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using TencentCloud.Common;

    public class DescribeMalwareTimingScanSettingResponse : AbstractModel
    {
        
        /// <summary>
        /// Detection mode: 0 - full disk detection; 1 - rapid detection
        /// </summary>
        [JsonProperty("CheckPattern")]
        public ulong? CheckPattern{ get; set; }

        /// <summary>
        /// Detection cycle; start time
        /// </summary>
        [JsonProperty("StartTime")]
        public string StartTime{ get; set; }

        /// <summary>
        /// Detection cycle; timeout end time
        /// </summary>
        [JsonProperty("EndTime")]
        public string EndTime{ get; set; }

        /// <summary>
        /// Whether all servers: 1 - all; 2 - specified
        /// </summary>
        [JsonProperty("IsGlobal")]
        public ulong? IsGlobal{ get; set; }

        /// <summary>
        /// When you select servers, host quuid is required.
        /// Note: This field may return null, indicating that no valid values can be obtained.
        /// </summary>
        [JsonProperty("QuuidList")]
        public string[] QuuidList{ get; set; }

        /// <summary>
        /// Monitoring mode: 0 - standard; 1 - deep
        /// </summary>
        [JsonProperty("MonitoringPattern")]
        public ulong? MonitoringPattern{ get; set; }

        /// <summary>
        /// Cycle: 1 - daily
        /// </summary>
        [JsonProperty("Cycle")]
        public ulong? Cycle{ get; set; }

        /// <summary>
        /// Scheduled detection switch: 0 - disable; 1 - enable
        /// </summary>
        [JsonProperty("EnableScan")]
        public long? EnableScan{ get; set; }

        /// <summary>
        /// Unique ID
        /// </summary>
        [JsonProperty("Id")]
        public long? Id{ get; set; }

        /// <summary>
        /// Real-time monitoring: 0 - disable 1 - enable
        /// </summary>
        [JsonProperty("RealTimeMonitoring")]
        public long? RealTimeMonitoring{ get; set; }

        /// <summary>
        /// Whether to isolate automatically: 1 - yes; 0 - no
        /// </summary>
        [JsonProperty("AutoIsolation")]
        public ulong? AutoIsolation{ get; set; }

        /// <summary>
        /// One-click scan timeout duration, such as 1800 seconds
        /// </summary>
        [JsonProperty("ClickTimeout")]
        public ulong? ClickTimeout{ get; set; }

        /// <summary>
        /// Whether to terminate the process: 1: terminate; 0: not terminate. It is effective only if automatic isolation is enabled.
        /// </summary>
        [JsonProperty("KillProcess")]
        public ulong? KillProcess{ get; set; }

        /// <summary>
        /// 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        /// </summary>
        [JsonProperty("EngineType")]
        public ulong? EngineType{ get; set; }

        /// <summary>
        /// Heuristic Engine: 0 - OFF, 1 - ON
        /// </summary>
        [JsonProperty("EnableInspiredEngine")]
        public ulong? EnableInspiredEngine{ get; set; }

        /// <summary>
        /// Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        /// </summary>
        [JsonProperty("EnableMemShellScan")]
        public ulong? EnableMemShellScan{ get; set; }

        /// <summary>
        /// Protection mode: 0 - standard; 1 - enhanced
        /// </summary>
        [JsonProperty("ProtectMode")]
        public ulong? ProtectMode{ get; set; }

        /// <summary>
        /// Scope of detection: 0 - malicious files other than scripts; 1 - all malicious files
        /// </summary>
        [JsonProperty("ProtectFileScope")]
        public ulong? ProtectFileScope{ get; set; }

        /// <summary>
        /// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        /// </summary>
        [JsonProperty("RequestId")]
        public string RequestId{ get; set; }


        /// <summary>
        /// For internal usage only. DO NOT USE IT.
        /// </summary>
        public override void ToMap(Dictionary<string, string> map, string prefix)
        {
            this.SetParamSimple(map, prefix + "CheckPattern", this.CheckPattern);
            this.SetParamSimple(map, prefix + "StartTime", this.StartTime);
            this.SetParamSimple(map, prefix + "EndTime", this.EndTime);
            this.SetParamSimple(map, prefix + "IsGlobal", this.IsGlobal);
            this.SetParamArraySimple(map, prefix + "QuuidList.", this.QuuidList);
            this.SetParamSimple(map, prefix + "MonitoringPattern", this.MonitoringPattern);
            this.SetParamSimple(map, prefix + "Cycle", this.Cycle);
            this.SetParamSimple(map, prefix + "EnableScan", this.EnableScan);
            this.SetParamSimple(map, prefix + "Id", this.Id);
            this.SetParamSimple(map, prefix + "RealTimeMonitoring", this.RealTimeMonitoring);
            this.SetParamSimple(map, prefix + "AutoIsolation", this.AutoIsolation);
            this.SetParamSimple(map, prefix + "ClickTimeout", this.ClickTimeout);
            this.SetParamSimple(map, prefix + "KillProcess", this.KillProcess);
            this.SetParamSimple(map, prefix + "EngineType", this.EngineType);
            this.SetParamSimple(map, prefix + "EnableInspiredEngine", this.EnableInspiredEngine);
            this.SetParamSimple(map, prefix + "EnableMemShellScan", this.EnableMemShellScan);
            this.SetParamSimple(map, prefix + "ProtectMode", this.ProtectMode);
            this.SetParamSimple(map, prefix + "ProtectFileScope", this.ProtectFileScope);
            this.SetParamSimple(map, prefix + "RequestId", this.RequestId);
        }
    }
}

